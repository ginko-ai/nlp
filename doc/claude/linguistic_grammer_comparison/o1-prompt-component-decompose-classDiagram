"""
@startuml
title classDiagram

package "Goal Decomposition" {
    class TaskDefinition {
        +primary_objective: string
        +sub_tasks: List
        +dependencies: Dict
        +priorities: PriorityQueue
        +define_task()
        +add_subtask()
        +set_priority()
    }

    class ScopeBoundaries {
        +inclusions: Set
        +exclusions: Set
        +limitations: List
        +time_constraints: TimeRange
        +check_scope()
        +add_constraint()
    }

    class ExpectedOutcomes {
        +success_criteria: List
        +deliverable_formats: Dict
        +quality_standards: QualityMetrics
        +validate_outcome()
        +measure_success()
    }
}

package "Format Decomposition" {
    class DataSchema {
        +field_definitions: Dict
        +data_types: TypeSystem
        +relationships: Graph
        +constraints: Rules
        +validate_schema()
        +apply_constraints()
    }

    class OutputTemplate {
        +structure: TemplateTree
        +styling: StyleSheet
        +placeholders: Dict
        +variables: Context
        +render_template()
        +bind_variables()
    }

    class ValidationRules {
        +type_rules: List
        +format_rules: List
        +custom_validators: Dict
        +validate()
        +add_rule()
    }
}

package "Warning Decomposition" {
    class InputValidation {
        +type_checking: TypeChecker
        +range_validation: RangeChecker
        +format_verification: FormatChecker
        +validate_input()
        +report_errors()
    }

    class EdgeCases {
        +boundary_conditions: Set
        +exception_scenarios: List
        +failure_modes: Dict
        +recovery_paths: Graph
        +handle_edge_case()
        +recover_from_failure()
    }

    class ErrorHandling {
        +error_types: Enum
        +handlers: Dict
        +recovery_strategies: List
        +handle_error()
        +log_error()
    }
}

package "Context Decomposition" {
    class UserProfile {
        +preferences: Dict
        +expertise_level: Level
        +usage_patterns: Pattern
        +goals: List
        +update_profile()
        +get_preference()
    }

    class DomainKnowledge {
        +subject_matter: Knowledge
        +terminology: Dict
        +business_rules: RuleEngine
        +best_practices: List
        +apply_knowledge()
        +validate_rules()
    }

    class InteractionHistory {
        +past_interactions: Timeline
        +outcomes: Dict
        +feedback: List
        +analyze_history()
        +track_interaction()
    }
}

TaskDefinition -- ScopeBoundaries
ScopeBoundaries -- ExpectedOutcomes
DataSchema -- OutputTemplate
OutputTemplate -- ValidationRules
InputValidation -- EdgeCases
EdgeCases -- ErrorHandling
UserProfile -- DomainKnowledge
DomainKnowledge -- InteractionHistory

@enduml
"""